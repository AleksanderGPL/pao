import { View, KeyboardAvoidingView, Platform } from 'react-native';
import { useState } from 'react';
import { useRouter, useLocalSearchParams } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { SvgXml } from 'react-native-svg';

import { Text } from '@/components/Text';
import { Input } from '@/components/Input';
import { Button } from '@/components/Button';
import { api } from '@/lib/axios';
import { useUsernameStore } from '@/lib/username-store';

// SVG content from logo.svg
const logoSvg = `<svg width="165" height="68" viewBox="0 0 165 68" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="81.4492" y="20.8633" width="5.40909" height="7.72727" fill="white"/>
<path d="M21.0058 52.8426C21.9987 53.9524 23.0209 54.8578 24.0723 55.5587C25.1236 56.2012 26.0582 56.5224 26.8759 56.5224C26.9343 64.1741 22.4368 67.9999 13.3833 67.9999C8.8274 67.9999 5.49806 66.8901 3.39532 64.6706C1.29258 62.451 0.241211 59.3845 0.241211 55.4711C0.241211 52.5506 0.504053 49.9222 1.02974 47.5858C1.55542 45.2494 2.13952 43.0591 2.78202 41.0147C3.42453 38.912 4.00862 36.9261 4.53431 35.057C5.05999 33.1879 5.32283 31.2896 5.32283 29.362C5.32283 28.2523 5.17681 27.3177 4.88476 26.5584C4.65112 25.7407 4.38828 24.8061 4.09623 23.7547C3.80419 22.645 3.51214 21.2431 3.22009 19.5493C2.98645 17.8554 2.05135 14.26 2.05135 11.398C2.05135 8.94478 3.68737 8.33464 5.32283 6.93282C7.01671 5.53099 9.4407 4.83008 12.5948 4.83008C15.048 4.83008 16.8587 5.29735 18.0269 6.2319C19.2535 7.16646 20.2756 8.42226 21.0934 9.99932C22.612 8.48067 24.3351 7.25407 26.2626 6.31952C28.2485 5.38497 30.3805 4.91769 32.6585 4.91769C36.5135 4.91769 39.726 5.5894 42.296 6.93282C44.9244 8.27624 47.0272 10.1161 48.6042 12.4525C50.2397 14.7889 51.3787 17.5049 52.0212 20.6006C52.7221 23.6379 53.0726 26.8796 53.0726 30.3258C53.0726 32.9542 52.7805 35.7871 52.1964 38.8244C51.6123 41.8617 50.6194 44.6945 49.2175 47.3229C47.8741 49.9514 46.0342 52.1417 43.6978 53.894C41.3615 55.5879 38.441 56.4348 34.9364 56.4348C32.1328 56.4348 29.7088 55.9091 27.6644 54.8578C25.6785 53.8064 24.0431 52.609 22.7581 51.2656C22.5828 51.0904 22.3492 51.0027 22.0571 51.0027C21.7651 51.0027 21.473 51.0904 21.181 51.2656C20.9474 51.4408 20.8013 51.6745 20.7429 51.9665C20.6845 52.2586 20.7721 52.5506 21.0058 52.8426ZM24.5979 23.6671C25.0068 26.0619 25.2405 28.1354 25.2989 29.8877C25.3573 31.64 25.3865 33.5091 25.3865 35.495C25.3865 36.0207 25.5325 36.4296 25.8245 36.7216C26.175 36.9553 26.5255 37.0721 26.8759 37.0721C27.2848 37.0721 27.6352 36.9553 27.9273 36.7216C28.2193 36.4296 28.3654 36.0207 28.3654 35.495C28.3654 33.5091 28.2777 31.64 28.1025 29.8877C27.9273 28.1354 27.6352 26.0619 27.2264 23.6671C27.168 23.1999 26.9635 22.8786 26.6131 22.7034C26.321 22.4697 26.029 22.3529 25.7369 22.3529C24.9192 22.3529 24.5395 22.791 24.5979 23.6671Z" fill="white"/>
<path d="M78.9297 4.91769C84.1281 4.91769 88.1876 5.6186 91.1081 7.02043C94.0869 8.36385 96.2773 10.1745 97.6791 12.4525C99.1393 14.7305 100.045 17.3297 100.395 20.2502C100.746 23.1706 100.921 26.1495 100.921 29.1868C100.921 31.348 101.213 33.6259 101.797 36.0207C102.439 38.4155 103.111 40.7811 103.812 43.1175C104.571 45.4538 105.243 47.7026 105.827 49.8638C106.47 51.9665 106.791 53.8356 106.791 55.4711C106.791 59.0925 105.71 62.1005 103.549 64.4953C101.447 66.8317 98.1464 67.9999 93.6489 67.9999C90.8452 67.9999 88.2752 67.5618 85.9388 66.6857C83.6608 65.7511 81.7625 64.4953 80.2439 62.9183C78.6084 64.1449 76.5933 65.3131 74.1985 66.4228C71.8037 67.4742 69.2337 67.9999 66.4885 67.9999C61.4068 67.9999 57.3766 66.9485 54.3977 64.8458C51.4772 62.6846 50.017 59.2969 50.017 54.6825C50.017 53.1639 50.2214 51.5868 50.6303 49.9514C50.9808 48.2575 51.4772 46.6512 52.1197 45.1326C52.7623 43.614 53.4924 42.2121 54.3101 40.9271C55.1278 39.6421 55.9748 38.6199 56.8509 37.8606C59.2457 38.9704 61.3484 39.6421 63.1591 39.8757C64.9698 40.051 66.9557 40.1386 69.1169 40.1386C71.3365 40.1386 73.2056 39.7589 74.7242 38.9996C76.3013 38.2403 77.5863 37.1889 78.5792 35.8455C79.5722 34.5021 80.3023 32.925 80.7696 31.1143C81.2369 29.3036 81.4705 27.3469 81.4705 25.2442C81.7041 25.3026 82.0838 25.361 82.6095 25.4194C83.1352 25.4778 83.9821 25.507 85.1503 25.507C85.5007 25.507 85.7344 25.3902 85.8512 25.1566C86.0264 24.9229 86.114 24.6601 86.114 24.368C86.114 24.0176 86.0264 23.6963 85.8512 23.4043C85.7344 23.1122 85.5007 22.937 85.1503 22.8786C84.6246 22.7618 84.0113 22.6742 83.3104 22.6158C82.6679 22.5573 81.967 22.5281 81.2076 22.5281C80.4483 22.5281 79.8934 22.7326 79.543 23.1414C79.1925 23.5503 79.0173 24.2512 79.0173 25.2442C79.0173 27.7558 78.7252 29.8293 78.1411 31.4648C77.5571 33.0418 76.7685 34.2976 75.7756 35.2322C74.841 36.1667 73.7312 36.8093 72.4462 37.1597C71.1612 37.5102 69.8178 37.6854 68.416 37.6854C66.4885 37.6854 64.6778 37.5394 62.9839 37.2473C61.29 36.8969 59.8006 36.4004 58.5156 35.7579C57.289 35.057 56.296 34.1516 55.5367 33.0418C54.7774 31.9321 54.3977 30.5886 54.3977 29.0116C54.3977 28.4275 54.4269 27.9602 54.4853 27.6098C54.6021 27.2009 54.719 26.8504 54.8358 26.5584C55.011 26.2079 55.1278 25.8867 55.1862 25.5946C55.3031 25.2442 55.3615 24.8645 55.3615 24.4557C55.3615 21.7688 55.8872 19.2572 56.9385 16.9208C58.0483 14.526 59.6254 12.4525 61.6697 10.7002C63.714 8.88953 66.1964 7.48771 69.1169 6.49475C72.0374 5.44338 75.3083 4.91769 78.9297 4.91769ZM77.1774 55.4711C77.1774 53.6604 77.3526 51.7329 77.7031 49.6885C78.0535 47.5858 78.3456 45.4246 78.5792 43.2051C78.6376 42.8546 78.55 42.5918 78.3164 42.4166C78.0827 42.2413 77.8199 42.1537 77.5278 42.1537C77.2358 42.1537 76.9146 42.2705 76.5641 42.5042C76.2721 42.6794 76.0676 43.0006 75.9508 43.4679C75.6003 45.337 75.2499 47.2353 74.8994 49.1629C74.6074 51.0904 74.4614 53.1347 74.4614 55.2958C74.4614 55.7047 74.6074 55.9968 74.8994 56.172C75.1915 56.3472 75.4835 56.4348 75.7756 56.4348C76.126 56.4348 76.4473 56.3472 76.7393 56.172C77.0314 55.9968 77.1774 55.7631 77.1774 55.4711Z" fill="white"/>
<path d="M106.079 36.4589C106.079 31.7278 106.692 27.4347 107.919 23.5797C109.204 19.6662 110.985 16.3369 113.263 13.5916C115.599 10.8464 118.374 8.71446 121.586 7.19581C124.857 5.67717 128.45 4.91784 132.363 4.91784C136.335 4.91784 139.927 5.67717 143.14 7.19581C146.352 8.71446 149.097 10.8464 151.375 13.5916C153.712 16.3369 155.493 19.6662 156.72 23.5797C158.005 27.4347 158.647 31.7278 158.647 36.4589C158.647 41.1901 158.005 45.5124 156.72 49.4258C155.493 53.2809 153.712 56.581 151.375 59.3262C149.097 62.0715 146.352 64.2034 143.14 65.7221C139.927 67.2407 136.335 68 132.363 68C128.45 68 124.857 67.2407 121.586 65.7221C118.374 64.2034 115.599 62.0715 113.263 59.3262C110.985 56.581 109.204 53.2809 107.919 49.4258C106.692 45.5124 106.079 41.1901 106.079 36.4589ZM130.961 23.6673C131.312 25.9452 131.545 27.9312 131.662 29.625C131.779 31.2605 131.808 32.9836 131.75 34.7943C131.75 36.5466 131.691 38.5909 131.574 40.9273C131.516 43.2052 131.487 46.1257 131.487 49.6887C131.487 49.9807 131.604 50.2144 131.837 50.3896C132.129 50.5648 132.451 50.6524 132.801 50.6524C133.093 50.6524 133.385 50.5648 133.677 50.3896C133.969 50.2144 134.115 49.9807 134.115 49.6887C134.29 46.1257 134.437 43.2052 134.553 40.9273C134.67 38.5909 134.699 36.5466 134.641 34.7943C134.641 32.9836 134.553 31.2605 134.378 29.625C134.203 27.9312 133.94 25.9452 133.59 23.6673C133.531 23.2 133.327 22.8788 132.976 22.7035C132.684 22.4699 132.392 22.3531 132.1 22.3531C131.282 22.3531 130.903 22.7911 130.961 23.6673Z" fill="white"/>
</svg>
`;

export default function UsernameScreen() {
  const [username, setUsername] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const router = useRouter();
  const { setUsername: setUsernameInStore } = useUsernameStore();
  const { redirect } = useLocalSearchParams();

  function Capitalize(str: string) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  async function handleContinue() {
    const trimmedName = username.trim();
    if (trimmedName.length < 2 || trimmedName.length > 20) {
      setErrorMessage('Username must be between 2-20 characters');
      setTimeout(() => setErrorMessage(''), 3000);
      return;
    }

    setIsLoading(true);
    setErrorMessage(''); // Clear previous errors

    try {
      const response = await api.post<{ sessionToken: string }>('/auth/register', {
        name: trimmedName,
      });

      await setUsernameInStore(Capitalize(trimmedName));
      await AsyncStorage.setItem('sessionToken', response.data.sessionToken);

      // Navigate to main app
      if (redirect) {
        router.replace({
          pathname: decodeURIComponent(redirect as string),
        });
      } else {
        router.replace('/(tabs)');
      }
    } catch (error: any) {
      console.error('Error saving username:', error);
      let msg = 'An unexpected error occurred. Please try again.';
      if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        switch (error.response.status) {
          case 409:
            msg = 'Username already taken.';
            break;
          case 400:
            msg = 'Username must be between 2-20 characters.';
            break;
          case 500:
            msg = 'A server error occurred. Please try again later.';
            break;
          default:
            msg = error.response.data?.error || msg;
        }
      } else if (error.request) {
        // The request was made but no response was received
        msg = 'Could not connect to the server. Please check your network.';
      }
      setErrorMessage(msg);
      setTimeout(() => setErrorMessage(''), 5000); // Show error for 5 seconds
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <KeyboardAvoidingView
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      style={{ flex: 1, backgroundColor: '#5D28F6' }}
      keyboardVerticalOffset={-150}>
      <View className="flex-1 justify-evenly p-8">
        {/* Logo at the top */}
        <View className="items-center">
          <SvgXml xml={logoSvg} width={165} height={68} />
        </View>

        {/* Username input and button at the bottom */}
        <View className="gap-4">
          <Input
            className="rounded-2xl"
            placeholder="Enter your username"
            value={username}
            onChangeText={setUsername}
            maxLength={20}
            autoCapitalize="none"
            autoCorrect={false}
          />
          <View>
            <Button
              className={'bg-black/20'}
              onPress={handleContinue}
              disabled={isLoading}>
              <Text className="text-white">
                {isLoading ? 'Saving...' : 'Continue'}
              </Text>
            </Button>
            <View className="h-[20px] items-center justify-center">
              {errorMessage ? (
                <Text className="text-center text-sm text-red-500">
                  {errorMessage}
                </Text>
              ) : null}
            </View>
          </View>
        </View>
      </View>
    </KeyboardAvoidingView>
  );
}